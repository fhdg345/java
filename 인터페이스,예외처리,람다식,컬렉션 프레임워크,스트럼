7.7.1 자동 타입 변환(promotion)
자동 타입 변환의 개념은 자식은 부모의 특징과 기능을 상속받기 때문에 부모와 동일하게 취급될 수 있다. ex) 동물-고양이
Cat cat = new Cat();
Animal animal = cat; //Annimal animal = new Cat()도 가능하다.
위 코드로 생성되는 메모리 상태를 보면, cat과 animal은 동일한 cat 객체를 참조한다.
부모 클래스로 타입은 변해도, 참조하는 객체는 같다. ==연산 시 true를 산출한다.
부모 타입으로 자동 변환 이후 변수는 자식 객체를 참조하지만 변수로 접근 가능한 멤버는 부모 클래스 멤버로만 한정된다. 다만 자식 클래스에서 오버라이딩된 메소드는 호출 가능하다.
7.7.2 필드의 다형성
이러한 자동 타입 변환이 필요한 까닭은, 다형성을 구현하는 기술적 방법 때문이다.
다형성이란 동일한 타입을 사용하지만 다양한 결과가 나오는 성질을 뜻한다.
주로 필드의 값을 다양화함으로써 실행 결과가 다르게 나오도록 구현하는데, 필드의 타입은 변함이 없지만, 실행 도중에 어떤 객체를 필드로 저장하느냐에 따라 실행 결과가 달라질 수 있다. 이것이 필드의 다형성이다.
7.7.3 하나의 배열로 객체 관리
객체들을 배열을 통하여 관리하면, 코드를 보다 깔끔하게 만들 수 있다.
public class Body{
    Hand[] hands = {
        new Hand();
        new Hand();
    };
}//Body 클래스 -> 반복문을 이용하여 hands를 사용할 수 있다.
7.7.4 매개 변수의 다형성
자동 타입 변환은 필드의 값보다 메소드를 호출할 때 많이 발생한다.
메소드를 호출할 때 매개 변수에 자식 타입 객체를 지정함으로써 매개 변수의 다형성을 높일 수 있다.
class Driver{
    void drive(Vehicle vihicle){
        vehicle.run();
    }
}
을 정상적으로 호출하면

Driver driver = new Driver();
Vehicle vehicle = new Vehicle();
driver.drive(vehicle);
이지만, Vehicle의 자식 클래스인 Bus나 Taxi 객체를 매개값으로 넘겨줄 수도 있는 것이다. 이로써 메소드의 실행 결과가 다양해진다.
7.7.5 강제 타입 변환
강제 타입 변환은 부모 타입을 자식 타입으로 변환하는 것을 말하는데, 자식 타입이 부모 타입으로 자동 변환한 후, 다시 자식 타입으로 변환할 때에 사용할 수 있다.
이는 부모 타입으로 자동 변환된 자식 타입의 메소드와 필드를 다시 사용하고자 할 때 사용할 수 있다.
자식클래스 변수 = (자식클래스) 부모클래스 타입;//자동 변환된 상태
7.7.6 객체 타입 확인(instnaceof)
자동 변환되지 않은, 자식 객체를 참조하지 않는 부모 타입의 변수는 자식 타입으로 변환할 수 없다. 이 때 부모 변수가 참조하는 객체가 부모 객체인지 자녀 객체인지 확인하기 위하여 instanceof 연산자를 사용할 수 있다.
instanceof 연산자의 좌항에는 객체, 우항에는 타입이 오고, 좌항의 객체가 우항의 타입으로 객체가 생성되었다면 true를 반환한다.
boolean result = 좌항(객체) instanceof 우항(타입)
이는 주로 매개값의 타입을 확인할 때 사용된다. 타입을 확인하지 않고 잘못된 매개값으로 강제 타입 변환을 시도한다면 ClassCastException 예외가 발생할 수 있다.
public void method(Parent parent){
    if(parent instanceof Child){
        Child child = (Child) parent;
    }
}

7.8 추상 클래스
7.8.1 추상 클래스의 개념
사전적 의미로 추상(abstract)은 실체 간에 공통되는 특징을 추출한 것을 말한다.

객체를 직접 생성할 수 있는 클래스를 실체 클래스라고 하고, 이 클래스들의 공통적인 특성을 추출해서 선언한 클래스를 추상 클래스라고 한다.

추상 클래스가 부모 클래스, 실체 클래스가 자식 클래스로 상속의 관계를 가지고 있다. 실체 클래스는 추상 클래스의 특성을 물려받고 추가적인 특성(필드와 메소드)을 가질 수 있다.

추상 클래스는 new 연산자를 통해 객체(인스턴스)를 생성할 수 없다. 추상 클래스는 새로운 실체 클래스를 만들기 위해 부모 클래스로만 사용된다. extends 뒤에만 오는 클래스인 것이다.

class Ant extends animal {···}
7.8.2 추상 클래스의 용도
추상 클래스를 만드는 용도는?
실체 클래스들의 공통된 필드와 메소드의 이름을 통일할 목적
실체 클래스를 작성할 때 시간을 절약
7.8.3 추상 클래스 선언
추상 클래스를 선언할 때는 클래스 선언에 abstract 키워드를 붙여야 한다.
public abstract class 클래스{
    //내용
}
new 연산자를 통한 객체 생성은 불가하고, 상속만 가능하다. 그러나 자식 객체가 생성될 때 super(···)을 호출해서 추상 클래스 객체를 생성하므로 추상 클래스도 생성자가 반드시 있어야 한다.
7.8.4 추상 메소드와 오버라이딩
추상 클래스는 실체 클래스의 멤버를 통일화하는데 목적을 둔다. 그러나 메소드의 선언만 통일화하고, 실행 내용은 실체 클래스마다 달라야 하는 경우가 있다. 이를 위해 추상 클래스는 추상 메소드를 선언할 수 있다.
추상 메소드는 추상 클래스에서만 선언할 수 있다. 추상 메소드는 선언부는 있으나 실행 내용인 중괄호가 없다. 이 부분을 하위 클래스를 작성할 때 재정의를 통해 작성하게 된다. 재정의하지 않을 경우 컴파일 에러가 발생한다.
8. 인터페이스
8.1 인터페이스의 역할
인터페이스(interface)는 객체의 사용방법을 정의한 타입이다. 인터페이스는 객체의 교환성을 높여주기 때문에 다형성을 구현하는 매우 중요한 역할을 한다. 또한 개발 코드와 객체가 서로 통신하는 접점 역할을 한다. 개발 코드가 인터페이스의 메소드를 호출하면 인터페이스는 객체의 메소드를 호출한다. 그래서 개발 코드는 객체의 내부 구조를 알 필요 없이 인터페이스의 메소드만 알면 된다.

개발 코드로 메소드를 호출하지 않고 굳이 인터페이스를 쓰는 이유는 개발 코드를 수정하지 않고, 사용하는 객체를 변경할 수 있도록 하기 위해서이다.
인터페이서는 여러 객체들과 사용이 가능하므로 어떤 객체를 사용하느냐에 따라 실행 내용과 리턴값이 다를 수 있다. 따라서 개발 코드 측면에선 코드 변경 없이 실행 내용과 리턴값을 다양화할 수 있다는 장점을 가지게 된다.


8.2 인터페이스 선언
인터페이스는 ".java" 형태의 소스 파일로 작성되고 컴파일러를 통해 ".class" 형식으로 컴파일 되기 때문에 물리적 형태는 클래스와 동일하다. 차이점은 소스를 작성할 때 선언하는 방법이 다르다.

class 키워드 대신 interface 키워드를 사용한다. 이름 작성법은 클래스와 동일하다.
[public] interface 인터페이스명{...}
클래스는 필드, 생성자, 메소드를 구성멤버로 가지나, 인터페이스는 상수와 메소드만을 구성멤버로 가진다. 인터페이스는 객체 생성이 불가하므로 생성자를 가질 수 없기 때문이다.
interface 인터페이스명{
    //상수
    타입 상수명 = 값;
    //추상 메소드
    타입 메소드명 (매개변수, ..);
    //디폴트 메소드
    default 타입 메소드명(매개변수, ..);
    //정적 메소드
    static 타입 메소드명(매개변수){..};
}
8.2.1 상수 필드 선언
인터페이스는 데이터를 저장할 수 없으므로 데이터를 저장할 인스턴스 또는 정적 필드를 선언할 수 없다. 대신 상수 필드만 선언할 수 있다.

인터페이스에서 선언된 필드는 모두 public static final의 특성을 갖는다. 이를 생략해도 컴파일 과정에서 자동적으로 붙게 된다. 상수명은 모두 대문자나 언더바로 작성한다.

인터페이스 상수는 static { }블록으로 초기화가 불가하므로 선언과 동시에 초기값을 지정해야 한다.
public interface sample{
    public int MAX = 10;
}
8.2.2 추상 메소드 선언
인터페이스를 통해 호출된 메소드는 최종적으로 객체에서 실행되므로, 실행 블록이 필요 없는 추상 메소드로 선언한다. 추상 메소드는 리턴 타입, 메소드명, 매개 변수만 기술되고 중괄호{}를 붙이지 않는 메소드를 말한다. 이는 모두 public abstract의 특성을 가지므로 컴파일시 자동적으로 붙게 된다.
8.2.3 디폴트 메소드 선언
자바 8에서 추가된 인터페이스의 새로운 멤버이다. default 키워드가 리턴 타입 앞에 붙는다. 디폴트 메소드는 public 특성을 가지므로 public을 생략하더라도 자동적으로 붙게 된다.
디폴트 메소드 선언시 실행내용까지 모두 작성해야 한다.
[public] default 리턴타입 메소드명(매개변수, ...){...}
8.2.4 정적 메소드 선언
디폴트 메소드와 마찬가지로 자바8에서 추가된 인터페이스의 멤버이다. 형태는 정적 메소드와 동일하며, public 특성을 가진다.
[public] static 리턴타입 메소드명(매개변수, ..){..}

8.3 인터페이스 구현
개발 코드가 인터페이스 메소드를 호출하면 인터페이스는 객체의 메소드를 호출한다. 객체는 인터페이스에서 정의된 추상 메소드와 동일한 메소드 이름, 매개타입, 리턴타입을 가진 실체 메소드를 가지고 있어야 한다. 이러한 객체를 인터페이스의 구현(implement) 객체라고 하고, 구현 객체를 생성하는 클래스를 구현 클래스라고 한다.

8.3.1 구현 클래스
구현 클래스는 인터페이스 타입으로 사용할 수 있음을 알려주기 위해 클래스 선언부에 implements 키워드를 추가하고 인터페이스명을 명시한다.
public class 구현클래스명 implements 인터페이스명 {
    //인터페이스에 선언된 추상 메소드의 실체 메소드 선언
}
그리고 인터페이스에 선언된 추상 메소드의 실체 메소드를 선언해야 한다. 이 때 주의할 점은 인터페이스의 모든 메소드는 기본적으로 public 접근 제한을 가지므로 이보다 더 낮은 접근 제한으로 작성할 수 없다. public 생략 시 "Cannot reduce the visibility of the inherited method(상속된 메소드의 가시성을 줄일 수 없다)" 컴파일 에러가 발생한다.

추상 메소드에 대응하는 실체 메소드를 작성하지 않으면 해당 클래스는 자동으로 추상 클래스가 되며, 이 때는 클래스 선언부에 abstrac 키워드를 추가해야 한다.

public abstract calss Tv implements Rc{
    public void turnOn(){...}
    //public void turnOff(){..} -> 실체 메소드 작성하지 않음.
}
구현 클래스의 실체 메소드에 @Override 어노테이션을 붙이면 컴파일러가 실체 메소드인지를 체크한다.

구현 클래스가 작성되면 new 연산자로 객체를 생성하여 인터페이스에 대입할 수 있다. 인터페이스 변수는 참조 타입이므로 구현객체의 번지를 저장한다.

인터페이스 변수;
변수 = new 구현객체; //인터페이스 변수 = new 구현객체;
8.3.2 익명 구현 객체
구현 클래스를 만들어 사용하는 것은 일반적이고 클래스를 재사용할 수 있기 때문이 편리하지만 일회성의 구현 객체를 만들기 위해 소스파일을 만들고 클래스를 선언하는 것은 비효율적이다. 이에 소스파일을 만들지 않고도 구현객체를 만들 수 있는 방법을 제공하는데, 이것이 익명구현 객체이다.

ui프로그래밍 이벤트 처리, 임시 작업 스레드를 만들 때 많이 활용된다.
인터페이스 변수 = new 인터페이스(){
    //인터페이스에 선언된 추상 메소드의 실체 메소드 선언
}; //반점 있음!
중괄호에는 인터페이스에 선언된 모든 추상 메소드들의 실체 메소드를 작성해야 한다. 그렇지 않으면 컴파일 에러가 발생한다.

추가적으로 필드와 메소드 선언이 가능하나, 익명 객체 안에서만 사용할 수 있고 인터페이스 변수로 접근할 수 없다.

모든 객체는 클래스로부터 생성된다. 익명 구현 객체의 소스코드를 컴파일하면 컴파일러에 의해 "클래스명$1.class"의 이름으로 파일이 생성된다.

8.3.3 다중 인터페이스 구현 클래스
객체는 다수의 인터페이스 타입으로 사용할 수 있다.
public class 구현클래스명 implements 인터페이스A, 인터페이스B {
    //인터페이스A에 선언된 추상 메소드의 실체 메소드 선언
    //인터페이스B에 선언된 추상 메소드의 실체 메소드 선어
}
다중 인터페이스를 구현할 경우, 구현 클래스는 모든 인터페이스의 추상 메소드에 대해 실체 메소드를 작성해야한다. 하나라도 없으면 추상 클래스로 선언해야 한다.

8.4 인터페이스 사용
인터페이스로 구현 객체를 사용하려면 인터페이스 변수를 선언하고 구현 객체를 대입해야 한다. 인터페이스 변수는 참조 타입이므로 구현 객체가 대입될 경우 구현 객체의 번지를 저장한다.

개발 코드에서 인터페이스는 클래스의 필드, 생성자 또는 메소드의 매개변수, 생성자 또는 메소드의 로컬 변수로 선언될 수 있다.
8.4.1 추상 메소드 사용
구현 객체가 인터페이스 타입에 대입되면 인터페이스에 선언된 추상 메소드를 개발 코드에서 변수를 통해 호출할 수 있게 된다.
RC rc = new Tv();
rc.turnOn();//Tv의 실체 메소드 실행
8.4.2 디폴트 메소드 사용
디폴트 메소드는 인터페이스에 선언되나, 인터페이스에서 바로 사용할 수 없다. 디폴트 메소드는 추상 메소드가 아닌 인스턴스 메소드이므로 구현 객체가 있어야 사용이 가능하다.
RC rc = new tv();
rc.turnOff();
디폴트 메소드는 인터페이스의 모든 구현 객체가 가지고 있는 기본 메소드라고 생각할 수 있다.
어떤 객체의 디폴트 메소드 내용의 수정이 필요할 때는, 이를 재정의(오버라이딩)하면 된다. 그러면 디폴트 메소드를 호출할 때 재정의한 메소드가 호출된다.
8.4.3 정적 메소드 사용
인터페이스의 정적 메소드는 인터페이스로 바로 호출이 가능하다.
public class ex {
    public static void main(String[]args){
        RC.go();//인터페이스로 바로 호출
    }
}

8.5 타입 변환과 다형성
요즘은 상속보다도 인터페이스를 통해 다형성을 구현한다. 상속에서 부모 타입에 어떤 자식 객체를 대입하느냐에 따라 실행 결과가 달라지는 것처럼, 인터페이스 타입에 어떤 구현 객체를 대입하느냐에 따라 실행 결과가 달라진다.

상속은 같은 종류의 하위 클래스를 만드는 기술이고, 인터페이스는 사용 방법이 동일한 클래스를 만드는 기술이다.

프로그램 소스 코드는 변함이 없는데, 구현 객체를 교체함으로써 프로그램의 실행 결과가 다양해지는 것을 인터페이스의 다형성이라고 부른다.

클래스에 문제가 있어 다른 클래스를 만들 때는 같은 메소드를 사용한다면 메소드 선언부가 동일해야 한다. 인터페이스를 추상 메소드를 작성하고 구현 클래스로 해당 메소드를 작성할 시에 이러한 문제를 해결할 수 있다. 처음부터 메소드 선언부가 동일하기 때문이다.

인터페이스는 메소드의 매개 변수로 많이 등장하는데, 해당 매개 값으로 여러 종류의 구현 객체를 줄 수 있으므로 메소드 실행 결과가 다양하게 나온다. 이것이 인터페이스 매개 변수의 다형성이다.

8.5.1 자동 타입 변환
구현 객체가 인터페이스 타입으로 변환되는 것은 자동 타입 변환(promotion)에 해당한다. 자동 타입 변환은 프로그램 실행 도중에 자동적으로 타입 변환이 일어나는 것을 말한다.

인터페이스 변수 = 구현객체;//구현객체가 자동 타입 변환됨
구현 클래스를 상속하여 자식 클래스를 만들었다면 자식 객체 역시 인터페이스 타입으로 자동 타입 변환시킬 수 있다. 이를 통해 필드의 다형성과 매개 변수의 다형성을 구현할 수 있다.
8.5.2 필드의 다형성
같은 인터페이스의 구현 객체는 교체될 수 있다. 따라서 개발 코드의 수정 없이도 다양한 결과(개발 코드에서의 인터페이스 메소드 실행 등)를 얻을 수 있다.
8.5.3 인터페이스 배열로 구현 객체 관리
인터페이스 배열을 통해 여러 구현 객체들을 인덱스로 표현하여 관리할 수 있다. 이렇게 하면 제어문에서 가장 큰 이점이 있다.
Tire[] tires ={
    new HTire();
    new HTire();
    new HTire();
    new HTire();
}
void run(){
    for(Tire tire : tires){
        tire.roll();
    }
}
8.5.4 매개 변수의 다형성
자동 타입 변환은 주로 메소드를 호출할 때 많이 발생한다. 매개 변수를 인터페이스 타입으로 선언하고 호출 시 구현 객체를 대입한다.
//Driver 클래스
public class Driver{
    public void drice(Vehicle vehicle){
        vehicle.run();
    }
}
//Vehicle 인터페이스 타입
public interface Vehicle{
    public void run();
}
//구현 객체 Bus
public class Bus implements Vehicle{
    @Override
    public void run(){
        System.out.println("버스가 달립니다");
    }
}
//매개 변수의 다형성 테스트
public class DriverEx{
    public static void main(String[] args){
        Driver driver = new Driver()
            
        Bus bus = new Bus();
        
        driver.drive(bus);//bus ->자동 타입 변환됨
    }
}
인터페이스가 매개변수 타입으로 제공될 경우, 어떠한 구현 객체도 매개값으로 사용할 수 있고, 이를 통해 메소드의 실행결과가 다양해질 수 있게 된다.(매개 변수의 다형성)
8.5.5 강제 타입 변환
구현 객체가 인터페이스 타입으로 자동 변화하면, 인터페이스에 선언된 메소드만 사용이 가능하다. 그러나 경우에 따라 구현 클래스에 선언된 필드와 메소드를 사용해야 할 수 있는데, 이 때 강제 타입 변환을 사용하여 구현 클래스의 필드와 메소드를 사용할 수 있다.
구현 클래스 변수 = (구현 클래스) 인터페이스 변수;//강제 타입 변환
8.5.6 객체 타입 확인
강제 타입변환은 구현 객체가 인터페이스 타입으로 변환되어 있는 상태에서 가능하다. 이 때 상속에서 객체 타입 확인을 한 것처럼, 인터페이스 타입도 객체의 타입 확인이 필요하다. 어떤 구현 객체가 변환되어 있는지 알지 못하고 변환할 경우 ClassCastException이 발생할 수 있기 때문이다.
객체 타입 확인을 위하여 instanceof 연산자를 사용할 수 있다.
if(vehicle instanceof Bus){
    Bus bus = (Bus) vehicle; //안심하고 변환 가능
}

8.6 인터페이스 상속
인터페이스도 다른 인터페이스를 상속할 수 있다. 인터페이스는 클래스와 달리 다중 상속을 허용한다.
public interface 하위인터페이스 extends 상위인터페이스1, 하위인터페이스2 {...}
하위 인터페이스의 구현 클래스는 하위, 상위 인터페이스의 모든 추상 메소드에 대한 실체 메소드를 가지고 있어야 한다. 따라서 해당 구현 클래스로부터 객체를 생성하고 나서 하위 및 상위 인터페이스 타입으로 변환이 가능하다.
하위인터페이스 변수 = new 구현클래스(...);
상위인터페이스1 변수 = new 구현클래스(...);
상위인터페이스2 변수 = new 구현클래스(...);
하위 인터페이스로 타입 변환이 되면 상하위 인터페이스에 선언된 모든 메소드를 사용할 수 있으나, 상위 인터페이스로 타입 변환시 하위 인터페이스에 선언된 메소드는 사용이 불가하다.

8.7 디폴트 메소드와 인터페이스 확장
디폴트 메소드는 인터페이스에서 선언된 인스턴스 메소드이므로 구현 객체가 있어야 사용가능하다. 왜 선언은 인터페이스에서 하고, 사용은 구현 객체를 통해 하는 것일까?
8.7.1 디폴트 메소드의 필요성
인터페이스에서 디폴트 메소드를 허용한 이유는 기존 인터페이스를 확장해서 새로운 기능을 추가하기 위해서이다. 기존 인터페이스의 이름과 추상 메소드의 변경 없이 디폴트 메소드만 추가할 수 있기 때문에 이전에 개발한 구현 클래스를 그대로 사용할 수 있으면서 새롭게 개발하는 클래스는 디폴트 메소드를 활용할 수 있다.

추상 클래스는 구현 클래스에서 실행 내용을 채워야 하지만, 디폴트 메소드는 인터페이스에 정의된 것을 그냥 사용해도 되고, 필요에 따라 재정의해서 사용할 수도 있다.
8.7.2 디폴트 메소드가 있는 인터페이스 상속
부모 인터페이스에 디폴트 메소드가 정의되어 있을 경우, 자식 인터페이스에서 디폴트 메소드를 활용하는 방법은 다음 세 가지가 있다.
디폴트 메소드를 단순히 상속만 받는다.
10. 예외 처리
10.1 예외와 예외 클래스
컴퓨터 하드웨어의 오동작 도는 고장으로 인해 응용프로그램 실행 오류가 발생하는 것을 자바에서는 error라고 한다. 개발자는 이런 에러에 대처할 방법이 전혀 없다.

자바에서는 에러 이외에 예외( exception)이라고 부르는 오류가 있다. 이는 사용자의 잘못된 조작 도는 개발자의 잘못된 코딩으로 인해 발생하는 프로그램 오류를 말한다. 예외 발생 시 프로그램은 곧바로 종료된다는 점에서 에러와 동일하다. 그러나 예외는 예외처리를 통해 프로그램을 종료하지 않고 정상 실행 상태가 유지되도록 할 수 있다.

예외의 종류

일반 예외(Exception)

컴파일러 체크 예외라고도 하며, 자바 소스를 컴파일하는 과정에서 예외 처리 코드가 필요한지 검사한다. 예외 처리 코드가 없으면 컴파일 오류가 발생한다.

실행 예외(RuntimeException)

컴파일하는 과정에서 예외 처리 코드를 검사하지 않는 예외를 말한다.

JVM은 프로그램을 실행하는 도중에 예외가 발생하면 해당 예외 클래스로 객체를 생성한다. 그리고 예외 처리 코드에서 예외 객체를 이용하도록 한다.

모든 예외 클래스는 java.lang.Exception을 상속 받는다.

일반 예외는 Exception은 상속 받지만 RuntimeException을 상속 받지 않고, 실행 예외는 RuntimeException을 상속 받음으로 둘 다 받게 된다.


10.2 실행 예외
실행 예외는 자바 컴파일러가 체크를 하지 않기 때문에 오로지 개발자의 경험에 의해서 예외 처리 코드를 삽입해야 한다.

10.2.1 NullPointException
객체 참조가 없는 상태, 즉 null값을 갖는 참조 변수로 객체 접근 연산자인 도트(.)를 사용했을 때 발생한다.
public class NullPointExceptionEx{
	public static void main(String[]args){
		String data = null;
		System.out.println(data.toString()); //toString 함수가 참조할 객체가 없으므로 예외 발생
	}
}
10.2.2 ArrayIndexOutOfBoundsException
배열에서 인덱스 범위를 초과하여 사용할 경우 발생한다.
public class ArrayIndexOutOfBoundsException{
	public static void main(String[]args){
		String data1 = args[0]; //args[0], args[1]의 실행 매개값 주기 않았기 때문에 예외 발생
		String data2 = args[1];
		//if(args.lenghth ==2) 으로 먼저 조건을 걸어 예외를 처리해야 함.
		System.out.println("args[0]:" + data1);
		System.out.println("args[1]:" + data2);
	}
}
10.2.3 NumberFormatException
문자열로 되어 있는 데이터를 숫자로 변경할 때, 해당 데이터에 숫자로 변환될 수 없는 문자가 포함되어 있으면 발생한다.
public class NumberFormatException{
	public static void main(String[]args){
		String data1 = "100";
		String data2 = "a100";

		int value1= Integer.parseInt(data1);
		int value2= Integer.parseInt(data2); //숫자 변환 불가 문자 포함되어 있어 예외 발생

		System.out.println(data1 + data2);
	}
}
10.2.4 ClassCastException
타입 변환될 수 없는 클래스나 인터페이스를 강제로 타입 변환하고자 할 때 발생한다.

Animal animal = new Dog();
// Cat cat = (Cat) animal; 참조한 자식 객체가 아니므로 예외 발생
 
RemoteControl rc = new TV;
//Audio audio = (Audio) rc; 대입한 구현 클래스가 아니므로 예외 발생
해당 예외를 발생시키지 않기 위해서 타입 변환 전에 타입 변환이 가능한지 instanceof 연산자로 확인하는 것이 좋다. instanceof

Animal animal = new Cat();
if(animal instanceof Cat){
	Cat cat = (Cat) animal;
} else if(animal instanceof Dog){
	Dog dog = (Dog) animal;
}

10.3 예외 처리 코드
프로그램에서 예외가 발생했을 경우 프로그램의 갑작스러운 종료를 막고, 정상 실행을 유지할 수 있도록 처리하는 코드를 예외 처리 코드라고 한다.

예외 처리 코드는 try-catch-finally 블록을 사용할 수 있다.
try-catch-finally 블록은 생성자 내부와 메소드 내부에서 작성되어 일반 예외와 실행 예외가 발생할 수 있도록 예외 처리를 해준다.
public class Try{
	public static void main(String[]args){
		String data1 = null;
		
		try{
			data1 = args[0]; //예외 발생시 예외 객체를 catch의 매개값으로 보낸다.
		} catch(ArrayIndexOutOfBoudsException e) {
				System.out.println("실행 매개값의 수가 부족합니다");
				System.out.println("실행방법");
			  System.out.println("java Try num1");
		} finally { //예외 발생 여부와 상관 없이 실행, try나 catch블록에서 return문을 사용하더라도 항상 실행됨
				System.out.println("다시 실행하세요");
		}
	}
}

10.4 예외 종류에 따른 처리 코드
10.4.1 다중 catch
try 블록 내부에서 다양한 종류의 예외가 발생할 수 있다. 이 때 발생하는 예외별로 예외 처리 코드를 다양하게 하기 위해 다중 catch블록을 사용할 수 있다.
catch 블록이 여러 개 있더라도 try 블록에서 하나의 예외가 발생하면 즉시 해당의 catch 블록으로 이동하기 때문에 실행되는 catch 블록은 단 하나이다.
10.4.2 catch 순서
다중 catch 블록을 작성할 때는 상위 예외 클래스가 하위 예외 클래스보다 아래쪽에 위치하도록 해야 한다. try블록에서 예외 발생 시 catch 블록을 위부터 차례 대로 검색하기 때문에 하위 예외가 상속한 상위 예외가 실행될 수 있기 때문이다.
public class Catch{
	public static void main(String[]args){
		try{
			String data1 = args[0];
			System.out.println(data1);
		} catch(ArrayIndexOfBoundsException e){ //하위 예외 클래스가 먼저 있음
				System.out.println("실행 매개값의 수가 부족합니다.");
			} catch(Exception e) { //상위 예외 클래스 일수록 아래에 있어야 함
				System.out.println("실행에 문제가 있습니다.");
			} finally {
				System.out.println("다시 실행하세요");
			}
	}
}
10.4.3 멀티 catch
자바7부터 하나의 catch 블록에서 여러 개의 예외를 처리할 수 있도록 멀티(multi) catch 기능을 추가했다.
try{
  //실행 내용
} catch (ArrayIndexOfBoundsException e || NumberFormatException e) {// ||를 통해 멀티 가능
	System.out.println("실행 매개값의 수가 부족하거나 숫자로 변환할 수 없습니다.");
} catch (Exception e) {
	System.out.println("알 수 없는 예외 발생");
}

10.5 자동 리소스 닫기
try-with-resources를 사용하면 예외 발생 여부와 상관없이 사용했던 리소스 객체의 close() 메소드를 호출해서 안전하게 리소스를 닫아준다.

(리소스 : 지금은 데이터를 읽고 쓰는 객체 정도로 생각)

try(FileInputStream fis = new FileInputStream("file.txt");{
	...
} catch(IOException e){
	...
}
try 블록이 정상적으로 실행을 완료했거나 도중에 예외가 발생하게 되면 자동으로 FileInputStream의 close()메소드가 호출된다. try{}에서 예외가 발생하면 우선 close()로 리소스를 닫고 catch 블록을 실행한다.

//복수 개의 리소스를 사용해야 한다면 다음과 같이 작성할 수 있다.
try(
		FileInputStream fis = new FileInputStream("file1.txt");
		FileOutputStream fos = new FileOutputStream("file2.txt")
) {
	...
} catch(IOException e){
	...
}
try-with-resources를 사용하기 위해서 리소스 객체는 java.lang.AutoCloseable 인터페이스를 구현하고 있어야 한다. AutoCloseable에는 close() 메소드가 정의되어 있는데 try-with-resources는 이 메소드를 자동 호출한다.

//AutoCloseable 구현 클래스
public class FileInputStream implements AutoCloseable {
	private String file;

	public FileInputStream(String file){
		this.file = file;
	}
	
	public void read(){
		System.out.println(file +"을 읽습니다.");
	}
	
	@Override
	public void close() throws Exception {
		System.out.println(file +"을 닫습니다.");
	}
}
public class Try {
	public static void main(String[]args){
		try (FileInputStream fis =  new FileInputStream("file.txt")){
			fis.read();
			throw new Exception();//강제 예외 발생 ->  close() 호출됨
		} catch(Exception e){
			System.out.println("예외 처리 코드가 실행되었습니다.");
		}
	}
}

10.6 예외 떠넘기기
메소드 내부에서 예외가 발생할 수 있는 코드를 작성할 때 try-catch 블록으로 예외를 처리하는 것이 기본이지만. 경우에 따라서는 메소드를 호출한 곳으로 예외를 떠넘길 수도 있다. 이 때 throws를 사용한다.

리턴타입 메소드명(매개 변수, ...) throws 예외클래스1, 예외클래스2, ...{ //Exception만 적을 수도 있다
}
public void method1(){
		try{
			method2(); //호출한 곳
		} catch(ClassNotFoundException e) {
			System.out.println("클래스가 존재하지 않습니다");
		}
	}

	public void method2() throws ClassNotFoundException {//호출한 곳에서 예외처리하게 됨
		Class clazz = Class.forName("java.lang.String2");
	}
자바 API 도큐먼트에서 클래스 생성자와 메소드 선언부에 throws 키워드가 있는 것의 생성자와 메소드를 사용하고 싶다면, 반드시 try-catch 블록으로 예외 처리를 하거나, throws를 다시 사용해서 예외를 호출한 곳으로 떠넘겨야 한다. 그렇지 않으면 컴파일 오류가 발생한다.
예제 : forName () 메소드 try-catch 블록 처리
public class Ex {
	public static void main(String[]args){
		try{
			findClass(); //호출한 곳
		} catch(ClassNotFoundException e) {
			System.out.println("클래스가 존재하지 않습니다");
		}
	}

	public static void findClass() throws ClassNotFoundException {//호출한 곳에서 예외처리하게 됨
		Class clazz = Class.forName("java.lang.String2");
	}
}
main 메소드에서도 throws키워드를 통해 예외처리 떠넘겨서 JVM이 최종적으로 예외처리를 하게 할 수 있다. 이는 콘솔에 출력된다. 권장되는 방법은 아니다.

10.7 사용자 정의 예외와 예외 발생
자바 표준 API에서 제공하는 예외 클래스 외에 개발자가 직접 정의하여 예외를 만들 수 있다. 이를 사용자 정의 예외 라고 하며, 애플리케이션 서비스와 관련된 예외이기도 하기에 애플리케이션 예외(Application Exception) 라고도 한다.
10.7.1 사용자 정의 예외 클래스 선언
일반 예외로 선언할 경우 Exception을 상속하고, 실행 예외로 선언할 경우 RuntimeException을 상속한다.

이름은 Exception으로 끝나는 것이 좋다.

필드, 생성자, 메소드 선언들을 포함할 수 있지만 대부분 생성자 선언만을 포함한다.

생성자는 일반적으로 두 개를 선언한다.

매개 변수가 없는 기본 생성자
예외 발생 원인(예외 메시지)을 전달하기 위해 String 타입의 매개 변수를 갖는 생성자
상위 클래스의 생성자를 호출하여 예외 메시지를 넘겨준다. 예외메시지는 catch() 블록의 예외 처리 코드에서 이용하기 위함이다.
//사용자 정의 예외 클래스
public class BalanceInsufficientException extends Exception {
	public BalanceInsufficientException(){}
	public BalanceInsufficientException(String message){
		super(message);
	}
}
Exception을 상속하므로 컴파일러에 의해 체크 되는 예외가 되므로 소스 작성 시 try-catch 블록으로 예외 처리가 필요하다.
10.7.2 예외 발생시키기
다음과 같이 예외를 발생 시킬 수 있다.
throw new XXXException();
throw new XXXException("메시지");//catch블록에서 예외 메시지가 필요하다면 이 생성자를 사용
예외 발생 코드를 가지고 있는 메소드는 내부에서 try-catch 블록으로 예외를 처리할 수 있지만, 대부분은 자신을 호출한 곳에서 예외를 처리하도록 throws 키워드로 예외를 떠넘긴다.
public void method() throws XXXException{
	throw new XXXException("메시지");
}

10.8 예외 정보 얻기
try 블록에서 예외가 발생되면 예외 객체는 catch 블록의 매개 변수에서 참조하게 되므로 매개 변수를 이용하면 예외 객체의 정보를 알 수 있다. 모든 객체는 Exception을 상속하므로 Exception이 가진 모든 메소드들을 모든 예외 객체에서 호출할 수 있다.

예외를 발생시켰을 때 String 타입의 메시지를 갖는 생성자를 이용했다면, 메시지는 자동적으로 예외 객체 내부에 저장된다. ex) throw new XException("예외 메시지");
예외 메시지의 내용에는 왜 예외가 발생했는지에 대한 간단한 설명이 포함되며, 좀 더 상세한 원인을 알기 위해 예외 코드를 포함하기도 한다.
try{
	// 실행내용 및 예외 객체 생성
} catch (예외 클래스 e){
	//예외가 가지고 있는 메시지 얻기
	String message = e.getMessage();

	//예외의 발생 경로를 추적
	e.printStackTrace(); //콘솔에 추적 내용이 출력됨
}
14. 람다식
14.1 람다식
자바는 함수적 프로그래밍을 위해 자바 8부터 람다식(Lambda Expression)을 지원한다.

람다식은 익명함수(anonymous function)을 생성하기 위한 식으로 객체지향 언어 보다는 함수지향 언어에 가까워 기존 자바 개발과 다르게 생각될 수 있다.

자바에서 람다식을 수용한 이유는 자바 코드가 매우 간결해지고, 컬렉션의 요소를 필터링하거나 매핑해서 원하는 결과를 쉽게 집계할 수 있기 때문이다.

람다식의 형태는 매개 변수를 가진 코드 블록이지만, 런타임시에는 익명 구현 객체를 생성한다.

(람다식 -> 매개 변수를 가진 코드 블록 -> 익명 구현객체)

//Runnable 인터페이스의 익명 구현 객체 생성하는 전형적인 코드
Runnable runnable = new Runnable() {
    public void run();
};
//Runnable 인터페이스의 익명 구현 객체 생성하는 람다식
Runnable runnable = () -> {...};

14.2 람다식의 기본 문법
함수적 스타일의 람다식을 작성하는 방법은 다음과 같다.
(타입 매개변수, ...) -> {실행문; ...} // 매개 변수의 이름은 개발자가 마음대로 줄 수 있다.
람다식 기본 문법
//기본
(int a) -> {System.out.println(a);}

//매개 변수가 1개 라면 ()와 타입을 생략할 수 있다. 매개 변수 타입은 대입되는 값에 따라 자동으로 인식될 수 있기 때문에 람다식에서는 매개 변수의 타입을 일반적으로 언급하지 않는다.
a -> {System.out.prinln(a);}

//실행문이 하나일 때 {}를 생략할 수 있다.
a -> System.out.println(a)

//만약 매개 변수가 없다면 빈 괄호를 사용해야 한다.    
() ->{실행문; ..}

//리턴하는 실행문은 다음과 같이 작성할 수 있다.
(x,y) -> {return x+y;}

//중괄호에 return문만 있을 경우 다음과 같이 작성할 수 있다.
(x,y) -> x+y

14.3 타겟 타입과 함수적 인터페이스
람다식의 형태는 매개 변수를 가진 코드 블록이기 때문에 마치 자바의 메소드를 선언하는 것처럼 보이나, 자바는 메소드를 단독으로 선언할 수 없고 항상 클래스의 구성 멤버로 선언하기 때문에 람다식은 단순히 메소드를 선언하는 것이 아니라 이 메소드를 가지고 있는 객체를 생성해 낸다.

  인터페이스 변수 = 람다식; //람다식으로 인터페이스의 익명 구현 객체를 생성
//(타겟 타입)
람다식은 대입될 인터페이스의 종류에 따라 작성 방법이 달라지기 때문에 람다식이 대입될 인터페이스를 람다식의 타겟 타입(target type)이라고 한다.
14.3.1 함수적 인터페이스(@FunctionalInterface)
람다식이 하나의 메소드를 정의하므로, 두 개 이상의 추상 메소드가 선언된 인터페이스는 람다식을 이요해서 구현 객체를 생성할 수 없다. 이렇듯 하나의 추상메소드 만이 선언된 인터페이스를 함수적 인터페이스(functional interface)라고 한다.
함수적 인터페이스를 작성할 때 두 개 이상의 추상 메소드가 선언되지 않도록 컴파일러가 체킹하도록 하기 위하여 인터페이스 선언 시 @FunctionalInterface 어노테이션을 붙일 수 있다. 추상 메소드가 두 개 이상이면, 컴파일 오류가 발생된다.
@FunctionalInterface
public interface MyFunctionalInterface {
    public void method();
    public void otherMethod(); // 컴파일 오류 발생
}
13.4.2 매개 변수와 리턴값이 없는 람다식
매개 변수와 리턴값이 없는 추상 메소드를 가진 함수적 인터페이스는 다음과 같이 사용될 수 있다.
//함수적 인터페이스
@FunctionalInterface
public interface MyFunctionalInterface {
    public void method();
}
//위 인터페이스를 타겟 타입으로 갖는 람다식
MyFunctionalInterface fi = () -> {...}

//참조 변수로 메소드를 호출하여 람다식의 중괄호를 실행시킴
fi.method();
public class MyFunctionalInterfaceEx{
    public static void main(String[]args){
        MyFunctionalInterface fi;
        
        fi= () -> {
            String str = "method call1";
            System.out.println(str);
        };
        fi.method();
        
        fi = () -> System.out.println("mehod call2");
        fi.method();
    }
}
13.4.3 매개 변수가 있는 람다식
매개 변수가 있고 리턴값이 없는 추상 메소드를 가진 함수적 인터페이스는 다음과 같이 사용될 수 있다.
@FunctionalInterface
public interface MyFunctionalInterface{
    public void method(int x);
}
//람다식
MyFunctionalInterface fi = x -> {...};

//메소드 호출
fi.method(5);
14.3.4 리턴값이 있는 람다식
매개 변수가 있고 리턴값이 있는 추상 메소드를 가진 함수적 인터페이스는 다음과 같이 사용될 수 있다.
@FunctionalInterface
public interface MyFunctionalInterface{
    public int method(int x, int y);
}
//람다식
MyFunctionalInterface fi = (x, y) -> {...; return 값; };

//메소드 호출
fi.method(2,4);

14.4 클래스 멤버와 로컬 변수 사용
람다식의 실행 블록에는 클래스의 멤버(필드와 메소드) 및 로컬 변수를 사용할 수 있다.

클래스의 멤버는 제약 사항 없이 사용 가능하지만, 로컬 변수는 제약이 따른다.

14.4.1 클래스의 멤버 사용
람다식 실행 블록에는 클래스의 멤버인 필드와 메소드를 제약 없이 사용할 수 있으나, this 키워드의 사용에는 주의가 필요하다.
일반적으로 익명 객체 내부에서 this는 익명 객체의 참조이지만, 람다식에서 this는 내부적으로 생성되는 익명 객체의 참조가 아니라 람다식을 실행한 객체의 참조이다.
//함수적 인터페이스
@FunctionalInterface
public interface MyFunctionalInterface{
    public void method();
}
//this 사용
public class UsingThis{
        public int outter =10;
        
        class Inner{
            int inner =20;
            
            void method(){
                //람다식
                MyFunctionalInterface fi = () -> {
                    System.out.println("outter: "+ outter);
                    System.out.println("outter: "+ UsingThis.this.outter+"\n");
         			//바깥 객체의 참조 얻기 위해서는 클래스명.this 사용           
                    System.out.println("inner: "+ inner);
                    System.out.println("inner: "+ this.inner +"\n");//내부 객체는 this 사용 가능
                };
                fi.method;
            }
        }
}
//실행 클래스
public class UsingThisEx{
    public static void main(String[]args){
        UsingThis usingThis = new UsingThis();
        UsingThis.Inner inner = new usingTHis.new Inner();
        inner.method();
    }
}
14.4.2 로컬 변수 사용
람다식은 메소드 내부에서 주로 작성되기 때문에 로컬 익명 구현 객체를 생성시킨다고 봐야 한다. 이 때 람다식에서 바깥 클래스의 필드나 메소드는 제한 없이 사용할 수 있으나, 메소드의 매개 변수 또는 로컬 변수를 사용하면 이 두 변수는 final 특성을 가져야 한다.
따라서 매개 변수 또는 로컬 변수를 람다식에서 읽는 것은 허용되지만, 람다신 내부 또는 외부에서 변경할 수 없다.
(9.5.3 익명 객체의 로컬 변수 사용 참고, 람다식 내부 변수는 변경 가능)

14.5 표준 API의 함수적 인터페이스
자바 8부터는 빈번하게 사용되는 함수적 인터페이스(functional interface)는 java.util.function 표준 API로 제공한다.

이 패키지에서 제공하는 함수적 인터페이스의 목적은 메소드 또는 생성자의 매개 타입으로 사용되어 람다식을 대입할 수 있도록 하기 위해서이다.

java.util.function 패키지의 함수적 인터페이스는 크게 Consumer, Supplier, Function, Operator, Predicate로 구분 되며, 구분 기준은 인터페이스에 선언된 추상 메소드의 매개값과 리턴값의 유무이다.

14.5.1 Consumer 함수적 인터페이스
Consumer 함수적 인터페이스는 단지 매개값을 소비하며 리턴값이 없는 accept() 메소드를 가진다.
매개 변수의 타입과 수에 따른 Consumer들
인터페이스명	추상 메소드	설명
Consumer	void accept(T t)	객체를 T를 받아 소비
BiConsumer<T,U>	void accept(T t, U u)	객체 T, U를 받아 소비
DoubleConsumer	void accept(double value)	double 값을 받아 소비
intConsumer	void accept(int value)	int 값을 받아 소비
LongConsumer	void accept(long value)	long 값을 받아 소비
ObjDoubleConsumer	void accept(T t, double value)	객체 T와 double 값을 받아 소비
ObjIntConsumer	void accept(T t, int value)	객체 T와 int 값을 받아 소비
ObjLongConsumer	void accept(T t, long value)	객체 T와 long 값을 받아 소비
예를 들어, 다음과 같이 작성할 수 있다.
//Consumer<T> 인터페이스를 타겟 타입으로 하는 람다식
Consumer<String> consumer = t -> {t를 소비하는 실행문;};

//ObjIntConsumer<T> 인터페이스를 타겟 타입으로 하는 람다식
ObjIntConsumer consumer = <t,i> -> {t와 i를 소비하는 실행문}
//Consumer 함수적 인터페이스
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.DoubleConsumer;
import java.util.function.ObjIntConsumer;

public class ConsumerEx {

	public static void main(String[] args) {
		Consumer<String> consumer = t-> System.out.println(t+"8");
		consumer.accept("java");
		
		BiConsumer<String, String> biConsumer = (t, u) -> System.out.println(t+u);
		biConsumer.accept("java","8");
		
		DoubleConsumer doubleConsumer = d -> System.out.println("java"+d);
		doubleConsumer.accept(8.0);
		
		ObjIntConsumer oiConsumer = (t, u) -> System.out.println(t+u);
		oiConsumer.accept("java", 8);
	}
}
14.5.2 Supplier 함수적 인터페이스
Supplier 함수적 인터페이스는 매개 변수가 없고 리턴값이 있는 getXXX() 메소드를 가진다. 이 메소드들은 실행 후 호출한 곳으로 데이터를 리턴(공급)하는 역할을 한다.

리턴 타입에 따른 Supplier 함수적 인터페이스들

인터페이스명	추상 메소드	설명
Supplier	T get()	T 객체를 리턴
BooleanSupplier	boolean getAsBoolean()	boolean 값을 리턴
DoubleSupplier	double getAsDouble()	double 값을 리턴
IntSupplier	int getAsInt()	int 값을 리턴
LongSupplier	long getAsLong()	long 값을 리턴
14.5.3 Function 함수적 인터페이스
Function 함수적 인터페이스는 매개값과 리턴값이 있는 appyXXX() 메소드를 가지며, 이 메소드들은 매개값을 리턴값으로 매핑(타입 변환)하는 역할을 한다.
매개 변수와 리턴 타입에 따른 Function 함수적 인터페이스들
인터페이스명	추상메서드	설명
Function<T,R>	R apply(T t)	객체 T를 객체 R로 매핑
BiFunction<T,U,R>	R apply(T t, U u)	객체 T와 U를 객체 R로 매핑
DoubleFunction	R apply(double val)	double 를 객체 R로 매핑
IntFunction	R apply(int val)	int 를 객체 R로 매핑
IntToDoubleFunction	double applyAsdouble(int val)	int를 double로 매핑
IntToLongFunction	long applyAsLong(int val)	int를 long로 매핑
LongToDoubleFunction	double applyAsdouble(long val)	long을 double로 매핑
LongToIntFunction	int applyAsInt(long val)	long을 int로 매핑
ToDoubleBiFunction<T,U>	double applyAsDouble(T t, U u)	객체 T와 U를 double 로 매핑
ToDoubleFunction	double applyAsdouble(T t)	객체 T를 double로 매핑
ToIntBiFunction<T,U>	int applyAsInt(T t, U u)	객체 T와 U를 int로 매핑
ToIntFunction	int applyAsInt(T t)	객체 T를 int로 매핑
ToLongBiFunction<T,U>	long applyAsLong(T t, U u)	객체 T와 U를 long으로 매핑
ToLongFunction	long applyAsLong(T t)	객체 T를 long으로 매핑
14.5.4 Operator 함수적 인터페이스
Operator 함수적 인터페이스는 Function과 동일하게 매개 변수와 리턴값이 있는 applyXXX()메소드를 가지고 있으나, Function 처럼 매핑하는 것이 아닌 매개값을 이용해 연산을 수행한 후 동일한 타입으로 리턴값을 제공하는 역할을 한다.
Operator 함수적 인터페이스들
인터페이스명	추상메서드	설명
BinaryOperator	BiFunction<T,U,R>의 하위 인터페이스	T와 U를 연산한 후 R 리턴
UnaryOperator	Function<T,R>의 하위 인터페이스	T를 연산한 후 R 리턴
DoubleBinaryOperator	double applyAsDouble(double, double)	두 개의 double 연산
DoubleUnaryOperator	double applyAsDouble(double)	한 개의 double 연산
IntBinaryOperator	int applyAsInt(int,int)	두 개의 int 연산
IntUnaryOperator	int applyAsInt(int)	한 개의 int 연산
LongBinaryOperator	long applyAsLong(long, long)	두 개의 long 연산
LongUnaryOperator	long applyAsLong(long)	한 개의 long 연산
14.5.5 Predicate 함수적 인터페이스
Predicate 함수적 인터페이스는 매개 변수와 boolean 리턴값이 있는 testXXX() 메소드를 가지고 있다. 이 메소드들은 매개값을 조사해서 true 또는 false를 리턴하는 역할을 한다.
Predicate 함수적 인터페이스들
인터페이스명	추상 메소드	설명
Predicate	boolean test(T t)	객체 T를 조사
BiPredicate<T, U>	boolean test(T t, U u)	객체 T와 U를 비교 조사
DoublePredicate	boolean test(double value)	double 값을 조사
IntPredicate	boolean test(int value)	int 값을 조사
LongPredicate	boolean test(long value)	long 값을 조사
14.5.6 andThen()과 compose() 디폴트 메소드
디폴트 및 정적 메소드는 추상 메소드가 아니기 때문에 함수적 인터페이스에 선언되어도 여전히 함수적 인터페이스의 성질을 잃지 않는다.

Consumer, Function, Operator 종류의 함수적 인터페이스는 andThen()과 compose() 디폴트 메소드를 가지고 있다. 둘 다 두 개의 함수적인 인터페이스를 순차적으로 연결하고 , 첫 처리 결과를 두번째 매개값으로 제공해서 최종 결과값을 얻는다.

인터페이스AB = 인터페이스A.andThen(인터페이스B);
최종결과 = 인터페이스AB.method(); // andThen()은 A처리 ->A결과로 B처리

인터페이스AB = 인터페이스A.compose(인터페이스B);
최종결과 = 인터페이스AB.method(); // andThen()은 B처리 ->B결과로 A처리
14.5.7 and(), or(), negate() 디폴트 메소드와 isEqual() 정적 메소드
Predicate 종류의 함수적 인터페이스는 and(), or(), negate() 디폴트 메소드를 가지고 있으며, 이들은 각각 &&,||,!와 대응된다고 볼 수 있다.
14.5.8 minBy(), maxBy() 정적 메소드
BinaryOperator 함수적 인터페이스는 minBy()와 maxBy() 정적 메소드를 제공한다. 이 두 메소드는 매개값으로 제공되는 Comparator를 이용해서 최대 T와 최소 T를 얻는 BinaryOperator를 리턴한다.
리턴 타입	정적 메소드
BinaryOperator	minBy(Comparator<? super T> comparator)
BinaryOperator	maxBy(Comparator<? super T> comparator)
@FunctionalInterface
public interface Comparator<T>{
    public int compare(T o1, T o2);
}
(o1, o2) -> {...; return int값;} //람다식
14.6 메소드 참조
메소드 참조(Method Reference)는 메소드를 참조해서 매개 변수의 정보 및 리턴 타입을 알아내어, 람다식에서 불필요한 매개 변수를 제거하는 것이 목적이다.

메소드 참조도 람다식과 마찬가지로 인터페이스의 익명 구현 객체로 생성되므로 타겟 타입인 인터페이스의 추상 메소드가 어던 매개 변수를 가지고, 리턴 타입이 무엇인가에 따라 달라진다.

14.6.1 정적 메소드와 인스턴스 메소드 참조
정적(static) 메소드를 참조할 경우에는 클래스 이름 뒤에 ::기호를 붙이고 정적 메소드 이름을 기술하면 된다.
클래스 :: 메소드
인스턴스 메소드일 경우에는 먼저 객체를 생성한 다음 참조 변수 뒤에 ::기호를 붙이고 인스턴스 메소드를 기술하면 된다.
참조변수 :: 메소드
14.6.2 매개 변수의 메소드 참조
메소드는 람다식 외부의 클래스 멤버일 수도 있고, 람다식에서 제공되는 매개 변수의 멤버일 수도 있다. 다음과 같이 람다식에서 제공되는 a 매개 변수의 메소드를 호출해서 b 매개 변수를 매개값으로 사용하는 경우도 있다.
(a,b) -> {a.instanceMethod(b);}
//클래스 :: instanceMethod
14.6.3 생성자 참조
메소드 참조는 생성자 참조도 포함한다. 생성자를 참조한다는 것은 객체 생성을 의미한다.
단순히 객체를 생성하고 리턴하도록 구성된 람다식은 생성자 참조로 대치할 수 있다.
(a,b) -> {return new 클래스(a,b);}
//클래스 :: new 로 대치 가능
생성자가 오버로딩되어 여러 개 있을 경우, 컴파일러는 함수적 인터페이스의 추상 메소드와 동일한 매개 변수 타입과 개수를 가지고 있는 생성자를 찾아 실행한다. 만약 해당 생성자가 존재하지 않으면 컴파일 오류가 발생한다.
15 컬레션 프레임워크
1. 컬렉션(collection)의 개념
01. 컬렉션
요소(element) 객체들의 저장소
객체들의 컨테이너라고도 불림
요소의 개수에 따라 크기 자동 조절
요소의 삽입, 삭제에 따른 요소의 위치 자동 이동
고정 크기의 배열을 다루는 어려움 해소
다양한 객체들의 삽입, 삭제, 검색 등의 관리 용이

2. 컬렉션을 위한 자바 인터페이스와 클래스


3. 컬렉션과 제네릭
01. 컬렉션은 제네렉(generics) 기법으로 구현 됨
02. 컬렉션의 요소는 객체만 가능
기본적으로 int, char, double 등의 기본 타입
JDK 1.5부터 자동 박싱/언박싱으로 기본 타입 값을 객체로 자동 변환
03. 제네릭
특정 타입만 다루지 않고, 여러 종류의 타입으로 변신할 수 있도록 클래스나 메소드를 일반화시키는 기법
<E>,<K>,<V> : 타입 매개 변수
요소 타입을 일반화한 타입
제네릭 클래스 사례
제네릭 스택 Stack<E>
E에 특정 타입으로 구체화
정수만 다루는 스택 Stack<Integer>
문자열만 다루는 스택 Stack<String>
3. 제네릭의 기본 개념
01. JDK 1.5에서 도입(2004년 기점)
02. 모든 종류의 데이터 타입을 다룰 수 있도록 일반화된 타입 매개 변수로 클래스나 메소드를 작성하는 기법
C++의 템플릿(template)과 동일

4. 제네릭 Stack<E> 클래스의 JDK 메뉴얼


5. Vector<E>
01. Vector<E>의 특성
Java.util.Vector
<E>에서 E 대신 요소로 사용할 특정 타입으로 구체화
여러 객체들을 삽입, 삭제, 검색하는 컨테이너 클래스
배열의 길이 제한 극복
원소의 개수가 넘쳐나면 자동으로 길이 조절
Vector에 삽입 가능한 것
객체, null
기본 타입은 Wrapper 객체로 만들어 저장
Vector에 객체 삽입
벡터의 맨 뒤에 객체 추가
벡터 중간에 객체 삽입
Vector에서 객체 삭제
임의의 취이에 있는 객체 삭제 가능 : 객체 삭제 후 자동 자리 이동
9. 컬렉션과 자동 박싱/언박싱
01. JDK 1.5 이전
기본 타입 데이터를 Wrapper 클래스를 이용하여 객체로 만들어 사용
컬렉션으로부터 요소를 얻어올 때, Wrapper 클래스로 캐스팅 필요
자동 박싱/언박싱이 작동하여 기본 타입 값 사용 가능
제네릭의 타입 매개 변수를 기본 타입으로 구체화할 수는 없음
10. 컬렉션을 매개 변수로 받는 메소드 만들기
01. 컬렉션을 매개변수로 받는 메소드의 원형
예) public void printVector(Vector<Integer> v)

11. ArrayList<E>
01. Array<E>의 특성
java.util.ArrayList, 가변 크기 배열을 구현한 클래스
<E>에서 E대신 요소로 사용할 특정 타입으로 구체화
ArrayList에 삽입 가능한 것
객체, null
기본 타입은 박싱/언박싱으로 Wrapper 객체로 만들어 저장
ArrayList에 객체 삽입/삭제
리스트의 맨 뒤에 객체 추가
리스트의 중간에 객체 삽입
임의의 위치에 객체 삭제 가능
벡터와 달리 스레드 동기화 기능 없음
다수 스레드가 동시에 ArrayList에 접근할 때 동기화되지 않음
개발자가 스레드 동기화 코드 작성
12. ArryList<String> 컬렉션의 내부 구성
13. ArrayList<E> 클래스의 주요 메소드
15. HashMap<K,V>
01. HashMap<K,V>
키(key)와 값(value)의 쌍으로 구성되는 요소를 다루는 컬렉션
java.util.HashMap
K는 키로 사용할 요소의 타입, V는 값으로 사용할 요소의 타입 지정
키와 값이 한 쌍으로 삽입
키는 해시맵에 삽입되는 위치 결정에 사용
값을 검색하기 위해서는 반드시 키 이용
삽입, 삭제, 검색이 빠른 특징
요소 삽입 : put() 메소드
요소 검색 : get() 메소드


18. LinkedList<E>
01. LinkedList<E>의 특성
java.util.LinkedList
E에 요소로 사용할 타입 지정하여 구체화
List 인터페이스를 구현한 컬렉션 클래스
Vector, ArrayList 클래스와 매우 유사하게 작동
요소 객체들은 양방향으로 연결되어 관리 됨
요소 객체들은 맨 앞, 맨 뒤에 추가 가능
요소 객체는 인덱스를 이용하여 중간에 삽입 가능
맨 앞이나 맨 뒤에 요소를 추가하거나 삭제할 수 있어 스택이나 큐로 사용 가능
20. Commections 클래스 활용
01. Collections 클래스
java.util 패키지에 포함
컬렉션에 대해 연산을 수행하고 결과로 컬렉션 리턴
모든 메소드는 static 타입
주요 메소드
컬렉션에 포함된 요소들을 소팅하는 sort() 메소드
요소의 순서를 반대로 하는 reverse() 메소드
요소들의 최대, 최솟값을 찾아내는 max(), min() 메소드
특정 값을 검색하는 binarySearch() 메소드
21. 제네릭 만들기
01. 제네릭 클래스와 인터페이스
클래스나 인터페이스 선언부에 일반화된 타입 추가

22. 제네릭 객체 생성 - 구체화(specialization)
01. 구체화
제네릭 타입의 클래스에 구체적인 타입을 대입하여 객체 생성
컴파일러에 의해 이루어짐

구체화된 MyClass<String>의 소스 코드

23. 구체화 오류
01. 타입 매개 변수에 기본 타입은 사용할 수 없음
24. 타입 매개 변수
01. 타입 매개 변수
'<'과 '>'사이에 하나의 대문자를 타입 매개변수로 사용
많이 사용하는 타입 매개 변수 문자
E : Element를 의미하며 컬렉션에서 요소를 표시할 때 많이 사용한다
T : Type을 의미한다
V : Value를 의미한다
K : Key를 의미
타입 매개 변수가 나타내는 타입의 객체 생성 불가
ex) T a = new T(); X
타입 매개변수는 나중에 실제 타입으로 구체화
어떤 문자도 매개 변수로 사용 가능26. 제네릭 메소드
01. 제네릭 메소드 선언 가능
제네릭 메소드를 호출할 때는 컴파일러가 메소드의 인자를 통해 이미 타입을 알고 있으므로 타입을 명시하지 않아도 됨
27. 제네릭의 장점
컴파일 시에 타입이 결정되어 보다 안전한 프로그래밍 가능
런타입 타입 충돌 문제 방지
ClassCastException 방지
16 스트럼
스트림 소개
자바 8버전부터 추가된 컬렉션 요소를 하나씩 참조해서 람다식(함수적 인터페이스)으로 처리할 수 있도록 해주는 반복자이다.
자바 8 이전에는 컬렉션 처리에는 무조건 Iterator가 이용되었으나, 선택의 폭이 넓어졌다.
함수적 인터페이스 복습
스트림에서는 함수적 인터페이스를 적극 활용하기 때문에 함수적 인터페이스를 제대로 알고 가면 도움이 된다.

Consumer
매개 값: O (타입: T)
리턴 값: X
값을 소비하고 리턴하지 않음
내부 메소드: .accept()
Supplier
매개 값: X
리턴 값: O (타입: T)
Consumer와 반대로 값을 만들기만하고 소비하지 않음
내부 메소드: .get()
Function
매개 값: O (타입: T)
리턴 값: O (타입: A)
주로 매개 값을 리턴 값으로 매핑하는데 사용됨
보통 매개 값과 리턴 값의 타입이 다름
내부 메소드: .apply()
Operator
매개 값: O (타입: T)
리턴 값: O (타입: T)
주로 매개 값을 이용한 연산 후 결과를 리턴함
보통 매개 값과 리턴 값의 타입이 같음
내부 메소드: .apply()
Predicate
매개 값: O (타입: T)
리턴 값: O (타입: boolean)
매개 값을 이용한 조건식을 통해 true 혹은 false를 반환
내부 메소드: .test()
스트림 특징
람다식을 이용한다.
병렬 처리가 용이하다.
내부 반복자를 사용한다.
외부 반복자와 내부 반복자 비교
외부 반복자(external iterator): 개발자가 코드로 직접 컬렉션 요소를 반복해서 가져오는 코드 패턴이다.
for, iterator, while 등
내부 반복자(internal iterator): 컬렉션 내부에서 요소들을 반복시키고, 개발자는 요소당 처리해야 할 코드만 제공하는 코드 패턴이다.
스트림은 내부 반복자를 사용한다.
내부 반복자는 처리코드만 제공하고 처리를 위임하여 병렬 처리가 컬렉션 내부에서 일어나게 만들 수 있다.
외부 반복자는 요소를 가져오는 것부터 처리하는 것까지 모두 개발자가 작성해야 한다.
내부 반복자의 이점
개발자는 요소 처리 코드에만 집중할 수 있다.
내부 반복자는 반복 순서 변경이나 멀티코어 CPU 활용을 위해 요소들을 분배시켜 병렬작업이 가능하다.
처리할 것들을 부분으로 나누어 병렬작업을 한 뒤 다시 합치는 방식이다.
스트림의 중간처리와 최종처리 개념
스트림은 중간처리(Intermediate Operation)와 최종처리(Terminal Operation) 개념이 있는데, 두 페이즈를 명확히 나누는 편인 것 같다.

중간처리: 매핑(mapXxx), 필터링(filter, distinct), 정렬(sorted), 반복(peek)
최종처리: 반복(forEach), 카운팅(count), 평균(average), 리듀스(reduce)
하위 스트림
스트림의 하위 스트림에는 여러가지 종류가 있다. IntStream, DoubleStream과 같이 단순 숫자 타입에 관한 스트림도 있고 특이한 하위 스트림도 있다.

숫자 스트림
IntStream과 같은 스트림을 말한다. 이러한 스트림에는 다른 스트림에 없는 특이한 메소드가 존재하는데, 이를테면 IntStream.range(int, int)와 같은 메소드로 특정한 숫자의 범위를 스트림으로 만들 수 있다.
필터링
.distinct(): Object.equals()가 true인 객체를 중복으로 판단하고 제거한다.
.filter(): Predicate 수행 결과 false인 객체를 제거한다.
매핑
.flatXxx(): 각 요소의 값을 이용하여 원래 스트림의 길이보다
.mapXxx(): 각 요소의 값을 이용하여 변환된 타입의 데이터를 매핑
.asXxxStream():
.boxed():
루핑
루핑은 peek()과 forEach()가 있다. 두 루핑의 차이는 peek()은 중간 처리 메소드이며, forEach()는 최종 처리 메소드이다.
수집 .collect()
스트림의 결과를 새로운 컬렉션으로 만들 때 사용되며, 당연히 최종 처리 메소드이다.

R collect(Collector<T, A, R> collector)
위의 형태가 .collect() 메소드의 기본형이다. T는 타입이며, A는 Accumulator이고 R은 결과의 타입을 말한다.

Collectors 지원 메소드
Collectors 클래스에선 .collect()를 편리하게 쓸 수 있도록 정적 메소드를 지원한다. 이를테면 .collect(Collectors.toList)와 같은 방식으로 사용하여 스트림을 List 형태의 데이터로 반환받을 수 있다.

Collector<T, ?, List<T>> Collectors.toList(): T를 List에 저장
Collector<T, ?, Set<T>> Collectors.toSet(): T를 Set에 저장
Collector<T, ?, Collection<T>> Collectors.toCollection(Supplier<Collection<T>>): T를 Supplier가 제공한 Collection에 저장
Collector<T, ?, Map<K, U>> toMap(Function<T, K> keyMapper, Function<T, U> valueMapper): T를 K와 U로 매핑해서 K를 키로 U를 값으로 맵에 저장
Collector<T, ?, ConcurrentMap<K, U>> toConcurrentMap(Function<T, K> keyMapper, Function<T, U> valueMapper): T를 K와 U로 매핑해서 K를 키로 U를 값으로 ConcurrentMap에 저장
누적기 부분이 ?로 되어있는 이유는 누적기가 필요 없기 때문이다.
스트림의 병렬 처리
스트림은 데이터 병렬성을 이용한 병렬 처리를 한다.

병렬처리의 종류
멀티스레드에는 동시성(Concurrency)과 병렬성(Parallelism) 이 있다. 싱글코어에서는 멀티스레드를 이용해도 동시성을 이용한 처리를 이용하여 번갈아가며 처리할 뿐이고, 멀티코어에서 비로소 병럴성을 이용하여 동시에 작업을 처리한다.

병렬 처리라는 카테고리에도 두가지 종류의 병렬 처리가 존재한다. 데이터 병렬성(Data parallelism)과 작업 병렬성(Task Parallelism) 이 존재한다.

데이터 병렬성
데이터 병렬성은 전체 데이터를 쪼개서 서브 데이터로 만들고, 서브 데이터들을 병렬처리해서 작업을 빨리 끝내는 것을 말한다. 자바8에서 지원하는 병렬 스트림은 데이터 병렬성을 구현한 것이다.

작업 병렬성
작업 병렬성은 서로 다른 작업을 병렬처리 하는 것을 말한다. 대표적인 예로는 웹서버가 있다. 웹서버는 각각의 브라우저에서 요청한 내용을 개별 스레드에서 병렬로 처리한다.

포크 조인(ForkJoin) 프레임워크
병렬 스트림은 요소들을 병렬처리 하기 위해서 포크 조인(ForkJoin) 프레임워크를 사용한다.
포크 단계에서 전체 데이터를 서브 데이터로 분리한 뒤에 서브 데이터를 멀티 코어에서 병렬로 처리 후 조인 단계에서 서브 결과를 종합하는 방식이다.
스트림 병렬 처리 성능 주의사항
병렬처리가 항상 순차처리보다 빠르진 않다.

요소의 수와 요소당 처리시간
요소의 수가 적고 요소당 처리 시간이 짧으면 순차처리가 오히려 병렬처리보다 빠를 수 있다. 병렬 처리에는 스레드풀 생성과 스레드 생성이라는 오버헤드가 발생한다.

스트림 소스의 종류
ArrayList는 인덱스로 요소를 관리하여 데이터를 쪼개기 쉽지만, HashSet, TreeSet은 요소 분리가 쉽지 않고, LinkedList도 링크를 따라가야 하므로 분리가 쉽지 않다. 요소 분리가 쉽지 않은 자료구조는 상대적으로 병렬처리가 늦다.

코어의 수
싱글 코어 CPU인 경우에는 당연히 순차 처리가 빠르다. 병렬 스트림을 사용할 경우 스레드의 수만 증가하고, 동시성 작업으로 처리되기 때문에 좋지 못한 결과를 낼 수 있다. 코어가 많을수록 병렬 작업 처리 속도는 빨라진다.

